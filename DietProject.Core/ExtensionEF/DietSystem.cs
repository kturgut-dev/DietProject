// Licence file C:\Users\kturgut\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace DietProject.Core.ExtensionEF
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IDietSystem : IDisposable
    {
        DbSet<Comment> Comments { get; set; } // Comments
        DbSet<Contract> Contracts { get; set; } // Contracts
        DbSet<Customer> Customers { get; set; } // Customers
        DbSet<DietDetail> DietDetails { get; set; } // DietDetails
        DbSet<Dietitian> Dietitians { get; set; } // Dietitians
        DbSet<Food> Foods { get; set; } // Foods
        DbSet<Message> Messages { get; set; } // Messages
        DbSet<User> Users { get; set; } // Users

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class DietSystem : DbContext, IDietSystem
    {
        public DbSet<Comment> Comments { get; set; } // Comments
        public DbSet<Contract> Contracts { get; set; } // Contracts
        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<DietDetail> DietDetails { get; set; } // DietDetails
        public DbSet<Dietitian> Dietitians { get; set; } // Dietitians
        public DbSet<Food> Foods { get; set; } // Foods
        public DbSet<Message> Messages { get; set; } // Messages
        public DbSet<User> Users { get; set; } // Users

        static DietSystem()
        {
            System.Data.Entity.Database.SetInitializer<DietSystem>(null);
        }

        /// <inheritdoc />
        public DietSystem()
            : base("Name=DietSystem")
        {
        }

        /// <inheritdoc />
        public DietSystem(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public DietSystem(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public DietSystem(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public DietSystem(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public DietSystem(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CommentConfiguration());
            modelBuilder.Configurations.Add(new ContractConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new DietDetailConfiguration());
            modelBuilder.Configurations.Add(new DietitianConfiguration());
            modelBuilder.Configurations.Add(new FoodConfiguration());
            modelBuilder.Configurations.Add(new MessageConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CommentConfiguration(schema));
            modelBuilder.Configurations.Add(new ContractConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new DietDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new DietitianConfiguration(schema));
            modelBuilder.Configurations.Add(new FoodConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));

            return modelBuilder;
        }
    }

    #endregion

    #region Database context factory

    public class DietSystemFactory : IDbContextFactory<DietSystem>
    {
        public DietSystem Create()
        {
            return new DietSystem();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeDietSystem : IDietSystem
    {
        public DbSet<Comment> Comments { get; set; } // Comments
        public DbSet<Contract> Contracts { get; set; } // Contracts
        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<DietDetail> DietDetails { get; set; } // DietDetails
        public DbSet<Dietitian> Dietitians { get; set; } // Dietitians
        public DbSet<Food> Foods { get; set; } // Foods
        public DbSet<Message> Messages { get; set; } // Messages
        public DbSet<User> Users { get; set; } // Users

        public FakeDietSystem()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Comments = new FakeDbSet<Comment>("Id");
            Contracts = new FakeDbSet<Contract>("Id");
            Customers = new FakeDbSet<Customer>("Id");
            DietDetails = new FakeDbSet<DietDetail>("Id");
            Dietitians = new FakeDbSet<Dietitian>("Id");
            Foods = new FakeDbSet<Food>("Id");
            Messages = new FakeDbSet<Message>("Id");
            Users = new FakeDbSet<User>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Comments
    public class Comment
    {
        public long Id { get; set; } // ID (Primary key)
        public long DietitianId { get; set; } // DietitianID
        public long CustomerId { get; set; } // CustomerID
        public int Score { get; set; } // Score
        public string CommentText { get; set; } // CommentText
        public DateTime CommentDate { get; set; } // CommentDate

        public Comment()
        {
            Score = 0;
            CommentDate = DateTime.Now;
        }
    }

    // Contracts
    public class Contract
    {
        public long Id { get; set; } // ID (Primary key)
        public long CustomerId { get; set; } // CustomerID
        public long DietitanId { get; set; } // DietitanID
        public double ContractPrice { get; set; } // ContractPrice
        public DateTime ContractStartDate { get; set; } // ContractStartDate
        public DateTime ContractEndDate { get; set; } // ContractEndDate

        public Contract()
        {
            ContractStartDate = DateTime.Now;
        }
    }

    // Customers
    public class Customer
    {
        public long Id { get; set; } // ID (Primary key)
        public long UserId { get; set; } // UserID
        public double? Weight { get; set; } // Weight
        public double? Height { get; set; } // Height
        public DateTime? BirthDate { get; set; } // BirthDate
        public string AllergenicFood { get; set; } // AllergenicFood

        public Customer()
        {
            Weight = 0;
        }
    }

    // DietDetails
    public class DietDetail
    {
        public long Id { get; set; } // ID (Primary key)
        public DateTime CreatedDate { get; set; } // CreatedDate
        public bool IsCompleted { get; set; } // IsCompleted
        public long FoodId { get; set; } // FoodID
        public long? MeasureUnitId { get; set; } // MeasureUnitID

        /// <summary>
        /// öğün
        /// </summary>
        public string MealType { get; set; } // MealType (length: 50)
        public double Quantity { get; set; } // Quantity
        public long CustomerId { get; set; } // CustomerID
        public long DietitianId { get; set; } // DietitianID

        public DietDetail()
        {
            CreatedDate = DateTime.Now;
            IsCompleted = false;
            Quantity = 0;
        }
    }

    // Dietitians
    public class Dietitian
    {
        public long Id { get; set; } // ID (Primary key)
        public long UserId { get; set; } // UserID
        public bool IsCertificate { get; set; } // IsCertificate
        public DateTime? IsCertificateVerDate { get; set; } // IsCertificateVerDate
        public string CityName { get; set; } // CityName (length: 50)
        public double? MonthlyPrice { get; set; } // MonthlyPrice

        public Dietitian()
        {
            IsCertificate = false;
            MonthlyPrice = 0;
        }
    }

    // Foods
    public class Food
    {
        public long Id { get; set; } // ID (Primary key)
        public long CreatedBy { get; set; } // CreatedBy
        public DateTime CreatedDate { get; set; } // CreatedDate
        public string FoodName { get; set; } // FoodName (length: 100)

        public Food()
        {
            CreatedDate = DateTime.Now;
        }
    }

    // Messages
    public class Message
    {
        public long Id { get; set; } // ID (Primary key)
        public DateTime MessageDate { get; set; } // MessageDate
        public bool IsReaded { get; set; } // IsReaded
        public string MessageText { get; set; } // MessageText
        public long SendedUserId { get; set; } // SendedUserID
        public long ReceiverUserId { get; set; } // ReceiverUserID

        public Message()
        {
            MessageDate = DateTime.Now;
            IsReaded = false;
        }
    }

    // Users
    public class User
    {
        public long Id { get; set; } // ID (Primary key)
        public string FullName { get; set; } // FullName (length: 100)
        public string EPosta { get; set; } // EPosta (length: 100)
        public bool IsActive { get; set; } // IsActive
        public string Password { get; set; } // Password

        public User()
        {
            IsActive = false;
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Comments
    public class CommentConfiguration : EntityTypeConfiguration<Comment>
    {
        public CommentConfiguration()
            : this("dbo")
        {
        }

        public CommentConfiguration(string schema)
        {
            ToTable("Comments", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DietitianId).HasColumnName(@"DietitianID").HasColumnType("bigint").IsRequired();
            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("bigint").IsRequired();
            Property(x => x.Score).HasColumnName(@"Score").HasColumnType("int").IsRequired();
            Property(x => x.CommentText).HasColumnName(@"CommentText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CommentDate).HasColumnName(@"CommentDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Contracts
    public class ContractConfiguration : EntityTypeConfiguration<Contract>
    {
        public ContractConfiguration()
            : this("dbo")
        {
        }

        public ContractConfiguration(string schema)
        {
            ToTable("Contracts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("bigint").IsRequired();
            Property(x => x.DietitanId).HasColumnName(@"DietitanID").HasColumnType("bigint").IsRequired();
            Property(x => x.ContractPrice).HasColumnName(@"ContractPrice").HasColumnType("float").IsRequired();
            Property(x => x.ContractStartDate).HasColumnName(@"ContractStartDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ContractEndDate).HasColumnName(@"ContractEndDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Customers
    public class CustomerConfiguration : EntityTypeConfiguration<Customer>
    {
        public CustomerConfiguration()
            : this("dbo")
        {
        }

        public CustomerConfiguration(string schema)
        {
            ToTable("Customers", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("bigint").IsRequired();
            Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("float").IsOptional();
            Property(x => x.Height).HasColumnName(@"Height").HasColumnType("float").IsOptional();
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AllergenicFood).HasColumnName(@"AllergenicFood").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // DietDetails
    public class DietDetailConfiguration : EntityTypeConfiguration<DietDetail>
    {
        public DietDetailConfiguration()
            : this("dbo")
        {
        }

        public DietDetailConfiguration(string schema)
        {
            ToTable("DietDetails", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.IsCompleted).HasColumnName(@"IsCompleted").HasColumnType("bit").IsRequired();
            Property(x => x.FoodId).HasColumnName(@"FoodID").HasColumnType("bigint").IsRequired();
            Property(x => x.MeasureUnitId).HasColumnName(@"MeasureUnitID").HasColumnType("bigint").IsOptional();
            Property(x => x.MealType).HasColumnName(@"MealType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("float").IsRequired();
            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("bigint").IsRequired();
            Property(x => x.DietitianId).HasColumnName(@"DietitianID").HasColumnType("bigint").IsRequired();
        }
    }

    // Dietitians
    public class DietitianConfiguration : EntityTypeConfiguration<Dietitian>
    {
        public DietitianConfiguration()
            : this("dbo")
        {
        }

        public DietitianConfiguration(string schema)
        {
            ToTable("Dietitians", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("bigint").IsRequired();
            Property(x => x.IsCertificate).HasColumnName(@"IsCertificate").HasColumnType("bit").IsRequired();
            Property(x => x.IsCertificateVerDate).HasColumnName(@"IsCertificateVerDate").HasColumnType("datetime").IsOptional();
            Property(x => x.CityName).HasColumnName(@"CityName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.MonthlyPrice).HasColumnName(@"MonthlyPrice").HasColumnType("float").IsOptional();
        }
    }

    // Foods
    public class FoodConfiguration : EntityTypeConfiguration<Food>
    {
        public FoodConfiguration()
            : this("dbo")
        {
        }

        public FoodConfiguration(string schema)
        {
            ToTable("Foods", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("bigint").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.FoodName).HasColumnName(@"FoodName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
        }
    }

    // Messages
    public class MessageConfiguration : EntityTypeConfiguration<Message>
    {
        public MessageConfiguration()
            : this("dbo")
        {
        }

        public MessageConfiguration(string schema)
        {
            ToTable("Messages", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.MessageDate).HasColumnName(@"MessageDate").HasColumnType("datetime").IsRequired();
            Property(x => x.IsReaded).HasColumnName(@"IsReaded").HasColumnType("bit").IsRequired();
            Property(x => x.MessageText).HasColumnName(@"MessageText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SendedUserId).HasColumnName(@"SendedUserID").HasColumnType("bigint").IsRequired();
            Property(x => x.ReceiverUserId).HasColumnName(@"ReceiverUserID").HasColumnType("bigint").IsRequired();
        }
    }

    // Users
    public class UserConfiguration : EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.EPosta).HasColumnName(@"EPosta").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(max)").IsRequired();
        }
    }


    #endregion

}
// </auto-generated>
